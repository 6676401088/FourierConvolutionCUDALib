# include directories
# src directory
INCLUDE_DIRECTORIES(.)

# build and link
FIND_PACKAGE(CUDA QUIET)
CUDA_ADD_LIBRARY(${PROJECT_NAME} convolution3Dfft.cu standardCUDAfunctions.cu SHARED)
CUDA_ADD_CUFFT_TO_TARGET(${PROJECT_NAME})
IF(WIN32)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CUDA_CUDA_LIBRARY})
include (GenerateExportHeader)
GENERATE_EXPORT_HEADER( ${PROJECT_NAME}
             BASE_NAME ${PROJECT_NAME}
             EXPORT_MACRO_NAME ${PROJECT_NAME}_EXPORT
             EXPORT_FILE_NAME ${PROJECT_NAME}_Export.h
             STATIC_DEFINE ${PROJECT_NAME}_BUILT_AS_STATIC
)
CUDA_ADD_LIBRARY(${PROJECT_NAME}_static convolution3Dfft.cu standardCUDAfunctions.cu)
CUDA_ADD_CUFFT_TO_TARGET(${PROJECT_NAME}_static)
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_static ${CUDA_CUDA_LIBRARY})
ELSE()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CUDA_CUDA_LIBRARY})

ENDIF()


SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${PROJECT_SOURCE_DIR}/src/convolution3Dfft.h") 
IF(WIN32)
SET_TARGET_PROPERTIES(${PROJECT_NAME}_static PROPERTIES PUBLIC_HEADER "${PROJECT_SOURCE_DIR}/src/convolution3Dfft.h") 
INSTALL(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_static
  EXPORT fourierconvolutioncudalib-targets 
  LIBRARY DESTINATION "${INSTALL_LIB_DIR}" #COMPONENT shlib
  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" #COMPONENT shlib
  PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" #COMPONENT inc
  )
  
ELSE(WIN32)
INSTALL(TARGETS ${PROJECT_NAME}
  EXPORT fourierconvolutioncudalib-targets 
  LIBRARY DESTINATION "${INSTALL_LIB_DIR}" #COMPONENT shlib
  PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" #COMPONENT inc
  )
ENDIF(WIN32)




